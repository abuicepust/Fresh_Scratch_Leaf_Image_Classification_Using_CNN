# -*- coding: utf-8 -*-
"""Fresh_Scrotch_Leaf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wRFpOmS_TRnw0COrgOD8vSon1LmGD7eO
"""

import numpy as np
import cv2
import os
import random
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

DIRECTORY = r"/content/drive/MyDrive/leaf/leaf"
CATAGORIES = ['Strawberry_fresh','Strawberry_scrotch']

data = []

for categories in CATAGORIES:
    folder=os.path.join(DIRECTORY,categories)
    label=CATAGORIES.index(categories)
    
    
    for img in os.listdir(folder):
        img=os.path.join(folder,img)
        img_arr=cv2.imread(img)
        img_arr=cv2.resize(img_arr,(100,100))        
        data.append([img_arr,label])

data

random.shuffle(data)

x=[]
y=[]


for features,label in data:
    x.append(features)
    y.append(label)

X= np.array(x)
Y=np.array(y)

X

X = X/255

X

X.shape

import tensorflow as tf
from tensorflow import keras
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Activation

#Model

model=Sequential()
model.add( Conv2D(64,(3,3),input_shape=X.shape[1:],activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add( Conv2D(32,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add( Conv2D(32,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Flatten())

model.add(Dense(2,activation='softmax'))

#compile
model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

#Train
model.fit(X,Y,epochs=15,validation_split=0.1)

model.summary()

import keras.utils as image
import numpy as np

img_pred=tf.keras.utils.load_img(r"/content/drive/MyDrive/leaf/leaf/Strawberry_fresh/00e9a277-ca5e-4350-95ce-8b2918b69fb9___RS_HL 4667.JPG",target_size=(100,100))

img_pred=tf.keras.utils.img_to_array(img_pred)
img_pred=np.expand_dims(img_pred, axis=0)

#Predict
rslt= model.predict(img_pred)

print(rslt)
if rslt[0][0]>rslt[0][1]:
    prediction="Strawberry_fresh"
    
    
else:
    prediction="Strawberry_scrotch"
print(prediction)